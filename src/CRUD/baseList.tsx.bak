import React from "react";
import { Col, Box } from "react-simple-layout";
import { Content } from "../UI";
import { Row } from "react-simple-layout";
import { Button, Form, Table, Pagination, Select } from "@rxh/element-react";

import dict from "../../lib/dict";
import { listHook, listProp, Column } from "crud";
import { set, get } from "lodash";
import { createGlobalStyle } from "styled-components";

export const baseQueryPropfn = (path: string) => (useList: listHook) => {
  let { setQuery, query } = useList;
  return {
    onChange: (e: any) => {
      setQuery({ ...set(query, path, e) });
    },
    value: get(query, path, ""),
    placeholder: "请输入"
  };
};

const G = createGlobalStyle`
  .baselist {
    .el-input {
      width: 196px !important;
    }
  }
`;

export default function BaseList(props: listProp) {
  let {
    listData,
    paging,
    fetchData,
    liveColumn: { columns }
  } = props.hook;
  if (props.renderHandle) {
    columns = columns.concat({
      label: "操作",
      prop: "null",
      fixed: "right",
      width: 140,
      render: props.renderHandle
    });
  }

  const haveQuery =
    columns.filter(col => col.query !== undefined).length > 0 && !props.noQuery;

  const renderQuery = () => {
    let queryItem: [JSX.Element, string][] = [];

    const maxWidth = Math.max(
      ...columns.map(col => (col.label ? (col.label.length + 1) * 18 : 0))
    );

    for (let { prop, label, query, options } of columns) {
      if (query) {
        label = query.label || label || "";
        let item = (
          <Form.Item key={prop} label={label + "："} labelWidth={maxWidth}>
            {options ? (
              <query.comp {...query.props(props.hook)}>
                <Select.Option label="全部" value="" />
                {options.map(opt => (
                  <Select.Option key={opt.label} {...opt} />
                ))}
              </query.comp>
            ) : (
              <query.comp {...query.props(props.hook)} />
            )}
          </Form.Item>
        );
        queryItem.push([item, prop as string]);
      }
    }
    /**
     * 增加默认的一个查询按钮
     */
    const queryAction = props.queryAction || [
      {
        text: "查询",
        action: () => props.hook.fetchData(),
        buttonOption: {
          type: "primary"
        }
      }
    ];

    return (
      <Form inline>
        {queryItem.map(item => (
          <React.Fragment key={item[1]}>{item[0]}</React.Fragment>
        ))}
        {queryAction.map(a => (
          <Button key={a.text} onClick={a.action} {...a.buttonOption}>
            {a.text}
          </Button>
        ))}
      </Form>
    );
  };
  return (
    <Content className="baselist" height="100%">
      <G />
      {haveQuery && (
        <>
          <Col className="querybar" c="top" pd={20}>
            {props.renderTitle && props.renderTitle()}
            <Row mgt={16}>{renderQuery()}</Row>
          </Col>
          {/* <Gap height={52} /> */}
        </>
      )}
      {props.renderGap && props.renderGap()}
      <Col c="bottom">
        <Table
          style={{ width: "100%" }}
          columns={columns.filter(col => col.hidden !== true)}
          data={listData.items}
          height={props.fixed ? 400 : undefined}
          border
          stripe
          onSelectChange={function() {
            // 这里element-react 的ts定义里面，onSelectChange 是没有参数的，与实际不符，所以只能采用这种形式传递参数
            props.onSelectChange && props.onSelectChange(arguments[0]);
          }}
        />
        {listData.count > 0 && (
          <Box mgr={8} mgt={8}>
            <Pagination
              layout="total, prev, pager, next, jumper"
              total={listData.count}
              pageSize={10}
              currentPage={paging}
              onCurrentChange={page => page && fetchData({ page })}
            />
          </Box>
        )}
      </Col>
    </Content>
  );
}
